#!/usr/bin/env python
# -*- coding: utf-8 -*-
from statistics import mean
import serial
import operator
import collections
import calcpoint
import math
from functools import reduce
import numpy as np
from adafruit_servokit import ServoKit
import board
import busio
import time

ser = serial.Serial(port = "/dev/ttyACM0", baudrate = 38400, timeout = 0.1)    
i2c_bus0 = (busio.I2C(board.SCL_1, board.SDA_1))
print("connect jetson")
kit = ServoKit(channels=16, i2c=i2c_bus0)
print("connect i2c")
kit.servo[0].set_pulse_width_range(1000, 2000) # servo 0 - servo motor
kit.servo[1].set_pulse_width_range(1000, 2000) # servo 1 - bldc motor
kit.servo[0].angle = 90 # servo motor default 95
kit.servo[1].angle = 90 # bldc center power 90
print("first default")
time.sleep(3)


def GPSparser(data):
	gps_data = data.split(b",")
	idx_rmc = data.find(b'GNGGA')
	if data[idx_rmc:idx_rmc+5] == b"GNGGA":
		data = data[idx_rmc:]    
		if checksum(data):
		   # print(data)
			parsed_data = data.split(b",")
			print(parsed_data)
			return parsed_data
		else :
			print ("checksum error")

def checksum(sentence):
	sentence = sentence.strip(b'\n')
	nmeadata, cksum = sentence.split(b'*',1)
	calc_cksum = reduce(operator.xor, (ord(chr(s)) for s in nmeadata), 0)
	print(int(cksum,16), calc_cksum)
	if int(cksum,16) == calc_cksum:
		return True 
	else:
		return False 

def Optimal(lat_1,lon_1,lat_2,lon_2):
    optimal = 199.798876356 - (math.atan((lon_2-lon_1)/(lat_2-lat_1)) * 180 / math.pi +180)
    print('cool: %f' %(optimal))
    return optimal

def location():
	
    data = ser.readline()
    result = collections.defaultdict()
    res = GPSparser(data)
    if res == None:
        return(0,0)
    else:
        print(res)
        lat = str (res[2])
        lon = str (res[4])
        if (res == "checksum error"):
            print("")
            print(lat)
        else:
            lat_h = float(lat[2:4])
            lon_h = float(lon[2:5])
            lat_m = float(lat[4:12])
            lon_m = float(lon[5:13])
            print('lat_h: %f lon_h: %f lat_m: %f lon_m: %f' %(lat_h, lon_h, lat_m, lon_m))
            latitude = lat_h + (lat_m/60)
            longitude = lon_h + (lon_m/60)
            print('latitude: %f longitude: %f' %(latitude,longitude))

    return latitude,longitude
    # Optimal(latitude,longitude,first_lon)


global hopping_count
hopping_count = 0
global points
points = [[35.232080,129.079296],[35.2320,129.079245],[12.12,12.12]]

def locationForAngle():
    global hopping_count
    global points
    if hopping_count == 2:
        kit.servo[1].angle = 90
        time.sleep(0.5)
        kit.servo[0].angle = 45
        kit.servo[1].angle = 110
        time.sleep(2.4)
        kit.servo[0].angle = 90
        kit.servo[1].angle = 140
        time.sleep(20)
        kit.servo[1].angle = 90
        return
    sum = 0
    cnt = 1
    while True:
        data = ser.readline()
        result = collections.defaultdict()
        res = GPSparser(data)
        if res == None:
            continue
        else:
            print(res)
            lat = str (res[2])
            lon = str (res[4])
            if (res == "checksum error"):
                print("")
                print(lat)
            else:
                if cnt%5 == 0:
                    Servo(sum/5)
                lat_h = float(lat[2:4])
                lon_h = float(lon[2:5])
                lat_m = float(lat[4:12])
                lon_m = float(lon[5:13])
                print('lat_h: %f lon_h: %f lat_m: %f lon_m: %f' %(lat_h, lon_h, lat_m, lon_m))
                latitude = lat_h + (lat_m/60)
                longitude = lon_h + (lon_m/60)
                print('latitude: %f longitude: %f' %(latitude,longitude))
                sum += Optimal(latitude,longitude,points[hopping_count][0],points[hopping_count][1])
                sum = sum+ 60
                cnt += 1

def Servo(angle):
    print('anglereal: %f' %(angle))
    if hopping_count == 1:
            angle = 115
    kit.servo[0].angle = angle
    print('angleangleangle: %f' %(angle))
    kit.servo[1].angle = 95
    time.sleep(0.5)
    kit.servo[0].angle = 90
    kit.servo[1].angle = 140
    locationForRange(angle)

def locationForRange(angle):
    global hopping_count
    global points
    latitudes = points[hopping_count][0]
    longitudes = points[hopping_count][1]
    while True:
        data = ser.readline()
        result = collections.defaultdict()
        res = GPSparser(data)
        if res == None:
            continue
        else:
            print(res)
            lat = str (res[2])
            lon = str (res[4])
            if (res == "checksum error"):
                print("")
                print(lat)
            else:
                lat_h = float(lat[2:4])
                lon_h = float(lon[2:5])
                lat_m = float(lat[4:12])
                lon_m = float(lon[5:13])
                print('lat_h: %f lon_h: %f lat_m: %f lon_m: %f' %(lat_h, lon_h, lat_m, lon_m))
                latitude = lat_h + (lat_m/60)
                longitude = lon_h + (lon_m/60)
                print('latitude_next: %f longitude_next: %f' %(latitude,longitude))
                range = 6 * math.sqrt((latitude-latitudes)*(latitude-latitudes)+(longitude-longitudes)*(longitude-longitudes)) / math.sqrt(0.000049*0.000049+0.000018*0.000018)
                print('range_:{0}'.format(range))
                if (range < 2.5):
                    kit.servo[1].angle = 90
                    hopping_count += 1
                    locationForAngle()

        
if __name__ == '__main__':
    print("##################")
    while True:
        locationForAngle()
